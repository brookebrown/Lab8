::::::::::::::
Driver1.java
::::::::::::::

/* Purpose: Data Structure and Algorithms Lab 8 Problem 1
 * Status: complete and fully tested
 * Last update: 11/02/16
 * Submitted: 11/02/16
 * Comment: sample run attached
 * @author: Brooke Brown
 * @version: 2016.11.02
 */

import java.io.*;
import java.util.*;

public class Driver1
{
    static BufferedReader stdin = new BufferedReader (new InputStreamReader(System.in));

    public static void main(String args[]) throws IOException
    {
        ListArrayBasedPlus list = new ListArrayBasedPlus();

        String askPrompt =  "   1. Insert item to list.\n   2. Remove item from list.\n   3. Get item from list.\n   4. Search for a specified item in the list.\n   5. Clear list.\n   6. Print size and content of list. \n   7. Exit program. \nMake your menu selection now: ";
        System.out.print(askPrompt);
        int answer = Integer.parseInt(stdin.readLine().trim());
        System.out.println(answer);
        while(answer != 7) {
            switch (answer) {
            case 1: //insert item to list
                System.out.println("You are now inserting an item into the list.");
                System.out.print("   Enter item: ");
                Object item  = stdin.readLine().trim();
                System.out.println(item);
                System.out.print("   Enter position to insert item in: ");
                int posi = Integer.parseInt(stdin.readLine().trim());
                System.out.println(posi);
                if(posi > list.size()) {
                    System.out.println("Position specified is out of range!");
                }
                else {
                    list.add(posi, item);
                    System.out.println("Item " + list.get(posi) + " inserted in position " + posi + " in the list.");
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 2: //remove item from list
                System.out.print("    Enter position to remove item from: ");
                int delete = Integer.parseInt(stdin.readLine().trim());
                System.out.println(delete);
                if(delete < 0 | delete >= list.size()) {
                    System.out.println("Position specified is out of range!");
                }
                else {
                    System.out.println("Item " + list.get(delete) + " removed from position " + delete + " in the list.");
                    list.remove(delete);
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 3: //get item from list
                System.out.print("    Enter position to retrieve item from: ");
                int num = Integer.parseInt(stdin.readLine().trim());
                System.out.println(num);
                if(num < 0 | num >= list.size()) {
                    System.out.println("Position specified is out of range!");
                }
                else {
                    System.out.println("Item " + list.get(num) + " retrieved from position " + num + " in the list.");
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 5: //clear list
                list.removeAll();
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 6: //print size and content of the list
                if(list.isEmpty()) {
                    System.out.println("List is empty.");
                }
                else {
                    System.out.print("     List of size " + list.size() + " has the following items: ");
                    System.out.println(list.toString());
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 4: //search for a specified item in the list, returns index of where the match is & whether it was successful or not
                System.out.print("Enter search item: ");
                String search = stdin.readLine().trim();
                System.out.println(search);
                int i;
                for(i = 0; i < list.size() && !(search.equals(list.get(i))); i++) {
                    //System.out.println("Successful! A match was found at index: " + i);
                }
                if(i == list.size()) {
                    //stop, if unsuccessful, state that the index will be list.size()
                    System.out.println("Unsuccessful.");
                }
                else {
                    System.out.println("Successful! A match was found at index: " + i);
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            default:
                System.out.println("Oh no! You put an incorrect number. Try again!");
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            }
        }
        System.out.print("Exiting program... Good Bye!");
    }
}
::::::::::::::
p1.output
::::::::::::::
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 25
   Enter position to insert item in: 0
Item 25 inserted in position 0 in the list.
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 2
   Enter position to insert item in: 1
Item 2 inserted in position 1 in the list.
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 667
   Enter position to insert item in: 0
Item 667 inserted in position 0 in the list.
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 23
   Enter position to insert item in: 2
Item 23 inserted in position 2 in the list.
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 6
   Enter position to insert item in: 3
Item 6 inserted in position 3 in the list.
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 6
     List of size 5 has the following items: 667 25 23 6 2 
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: 24
Unsuccessful.
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: 23
Successful! A match was found at index: 2
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: 669
Unsuccessful.
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: 0
Unsuccessful.
   1. Insert item to list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 7
Exiting program... Good Bye!::::::::::::::
Driver2.java
::::::::::::::

/* Purpose: Data Structure and Algorithms Lab 8 Problem 2
 * Status: complete and fully tested
 * Last update: 11/02/16
 * Submitted: 11/02/16
 * Comment: sample run attached
 * @author: Brooke Brown
 * @version: 2016.11.02
 */

import java.io.*;
import java.util.*;
import java.lang.*;

public class Driver2
{
    static BufferedReader stdin = new BufferedReader (new InputStreamReader(System.in));

    public static void main(String args[]) throws IOException
    {
        ListArrayBasedPlus list = new ListArrayBasedPlus();

        String askPrompt =  "   1. Insert item to ordered list.\n   2. Remove item from list.\n   3. Get item from list.\n   4. Search for a specified item in the list.\n   5. Clear list.\n   6. Print size and content of list. \n   7. Exit program. \nMake your menu selection now: ";
        System.out.print(askPrompt);
        int answer = Integer.parseInt(stdin.readLine().trim());
        System.out.println(answer);
        while(answer != 7) {
            switch (answer) {
            case 1: //insert item to list
                System.out.println("You are now inserting an item into the list.");
                System.out.print("   Enter item: ");
                Object item  = stdin.readLine().trim();
                System.out.println(item);
                if(list.size() == 0) {
                    list.add(0, item);
                    System.out.println("Item " + list.get(0) + " inserted in position 0 in the list.");
                }
                else { //searches the list to see how item will be placed ascendingly in the list
                    boolean advance = true;
                    for(int posi = 0; posi < list.size(); posi++) {
                        if(list.get(posi).equals(item) && advance) {
                            advance = false;
                            list.add(posi, item);
                            System.out.println("Item " + list.get(posi) + " inserted in position " + posi + " in the list.");
                        }
                        else if((((String) list.get(posi)).compareTo((String) item) > 0) && advance) {
                            advance = false;
                            list.add(posi, item);
                            System.out.println("Item " + list.get(posi) + " inserted in position " + posi + " in the list.");
                            //stop
                        }
                    }
                    //if unsuccessful, pos = list.size()
                    if(advance) {
                        list.add(list.size(), item);
                        System.out.println("Item " + list.get(list.size()-1) + " inserted in position " + (list.size()-1) + " in the list.");
                    }
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 2: //remove item from list
                System.out.print("    Enter position to remove item from: ");
                int delete = Integer.parseInt(stdin.readLine().trim());
                System.out.println(delete);
                if(delete < 0 | delete >= list.size()) {
                    System.out.println("Position specified is out of range!");
                }
                else {
                    System.out.println("Item " + list.get(delete) + " removed from position " + delete + " in the list.");
                    list.remove(delete);
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 3: //get item from list
                System.out.print("    Enter position to retrieve item from: ");
                int num = Integer.parseInt(stdin.readLine().trim());
                System.out.println(num);
                if(num < 0 | num >= list.size()) {
                    System.out.println("Position specified is out of range!");
                }
                else {
                    System.out.println("Item " + list.get(num) + " retrieved from position " + num + " in the list.");
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 5: //clear list
                list.removeAll();
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 6: //print size and content of the list
                if(list.isEmpty()) {
                    System.out.println("List is empty.");
                }
                else {
                    System.out.print("     List of size " + list.size() + " has the following items: ");
                    System.out.println(list.toString());
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 4: //search for a specified item in the list by using A: Modified Sequential Search 1 (eager equality checking)
                System.out.print("Enter search item: ");
                Object search = stdin.readLine().trim();
                System.out.println(search);
                boolean finished = false;
                for(int i = 0; i < list.size(); i++) {
                    if(search.equals(list.get(i)) && !finished) {
                        //stop, state index and successful
                        finished = true;
                        System.out.println("Successful! A match was found at index: " + i);
                    }
                    else if((((String) list.get(i)).compareTo((String) search) > 0) && !finished) {
                        //stop, state index and unsuccessful
                        finished = true;
                        System.out.println("Unsuccessful. The item would be placed at index " + i);
                    }
                }
                if(!finished) {
                    //stop, if unsuccessful, state that the index will be list.size()
                    System.out.println("Unsuccessful. The item would be placed at index " + list.size());
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            default:
                System.out.println("Oh no! You put an incorrect number. Try again!");
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            }
        }
        System.out.print("Exiting program... Good Bye!");
    }
}
::::::::::::::
p2.output
::::::::::::::
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 4
Item 4 inserted in position 0 in the list.
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 2
Item 2 inserted in position 0 in the list.
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 6
     List of size 2 has the following items: 2 4 
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 1
Item 1 inserted in position 0 in the list.
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 6
     List of size 3 has the following items: 1 2 4 
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: 2
Successful! A match was found at index: 1
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 6
     List of size 3 has the following items: 1 2 4 
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: 3
Unsuccessful. The item would be placed at index 2
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 3
Item 3 inserted in position 2 in the list.
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 6
     List of size 4 has the following items: 1 2 3 4 
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: 1
Successful! A match was found at index: 0
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: 67
Item 67 inserted in position 4 in the list.
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: -2
Item -2 inserted in position 0 in the list.
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 6
     List of size 6 has the following items: -2 1 2 3 4 67 
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: 68
Unsuccessful. The item would be placed at index 6
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 4
Enter search item: -2
Successful! A match was found at index: 0
   1. Insert item to ordered list.
   2. Remove item from list.
   3. Get item from list.
   4. Search for a specified item in the list.
   5. Clear list.
   6. Print size and content of list. 
   7. Exit program. 
Make your menu selection now: 7
Exiting program... Good Bye!::::::::::::::
AscendinglyOrderedStringListInterface.java
::::::::::::::
/*
 * Purpose: Data Structure and Algorithms Lab 8 Problem 3
 * Status: Complete and thoroughly tested
 * Last update: 09/21/16
 * Submitted:  09/21/16
 * Comment: test suite and sample run attached
 * @author: Brooke Brown
 * @version: 2016.09.21
 */

public interface AscendinglyOrderedStringListInterface 
{
  boolean isEmpty();
  int size();
  void add(String item) throws ListIndexOutOfBoundsException;
  String get(int index) throws ListIndexOutOfBoundsException;
  void remove(int index) throws ListIndexOutOfBoundsException;
  int search(String item);
  void clear();
} 
::::::::::::::
AscendinglyOrderedStringList.java
::::::::::::::

/* Purpose: Data Structure and Algorithms Lab 8 Problem 3
 * Status: complete and fully tested
 * Last update: 11/02/16
 * Submitted: 11/02/16
 * Comment: sample run attached
 * @author: Brooke Brown
 * @version: 2016.11.02
 */


public class AscendinglyOrderedStringList implements AscendinglyOrderedStringListInterface
{

    private static final int MAX_LIST = 3;
    protected String []items;  // an array of list items
    protected int numItems;  // number of items in list

    public AscendinglyOrderedStringList()
    {
        items = new String[MAX_LIST];
        numItems = 0;
    }  // end default constructor

    public boolean isEmpty()
    {
        return (numItems == 0);
    } // end isEmpty

    public int size()
    {
        return numItems;
    }  // end size

    public void clear()
    {
        // Creates a new array; marks old array for
        // garbage collection.
        items = new String[MAX_LIST];
        numItems = 0;
    } // end removeAll

    public void resize()
    {
        String []temp = new String[items.length + items.length];
        for(int index = 0; index < numItems; index++) {
            temp[index] = items[index];
        }
        items = temp;
    }

    public String toString()
    {
        String output = new String();
        for(int i = 0; i < numItems; i++) {
            output = output + get(i) + " ";
        }
        return output;
    }

    public void add(String item)
    throws  ListIndexOutOfBoundsException
    {
        if (items.length == numItems)
            //fixes implementation error
            //fixes programm
        {
            resize();
        }  // end if
        if(numItems > 0) {
            int index = search(item);
            for (int pos = numItems-1; pos >= index; pos--)  //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException
            {
                items[pos+1] = items[pos];
            } // end for
            // insert new item
            items[index] = item;
        }
        else {
            items[0] = item;
        }
        numItems++;
    } //end add

    public String get(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            return items[index];
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on get");
        }  // end if
    } // end get

    public void remove(int index)
    throws ListIndexOutOfBoundsException
    {
        if (index >= 0 && index < numItems)
        {
            // delete item by shifting all items at
            // positions > index toward the beginning of the list
            // (no shift if index == size)
            for (int pos = index+1; pos < numItems; pos++) //textbook code modified to eliminate logic error causing ArrayIndexOutOfBoundsException

            {
                items[pos-1] = items[pos];
            }  // end for
            items[--numItems] = null;
            // fixes memory leak
        }
        else
        {
            // index out of range
            throw new ListIndexOutOfBoundsException(
                "ListIndexOutOfBoundsException on remove");
        }  // end if
    } //end remove

    public int search(String item) // i used binary search 2 because it was more efficient. Except when it came to knowing if the item was larger or smaller, this search failed, which is why I have at the end, an equality and comparison check.
    {
        int high = numItems - 1;
        int low = 0;
        int comp = 0;
        while(low != high) {
            int mid = (high + low) / 2;
            comp = item.compareTo(items[mid]);
  
            if(comp <= 0) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
//out of for loop, therefore it has reached end of the tree
        if(item.compareTo(items[low])== 0) {
            System.out.println("This item is in the list!");
            return low;
        }
        else {
            System.out.println("This item was not in the list.");
            if(item.compareTo(items[low]) < 0) {
                return low;
            }
            else {
                return low + 1;
            }
        }
    }


}
::::::::::::::
Driver3.java
::::::::::::::

/* Purpose: Data Structure and Algorithms Lab 8 Problem 3
 * Status: complete and fully tested
 * Last update: 11/02/16
 * Submitted: 11/02/16
 * Comment: sample run attached
 * @author: Brooke Brown
 * @version: 2016.11.02
 */

import java.io.*;
import java.util.*;

public class Driver3
{
    static BufferedReader stdin = new BufferedReader (new InputStreamReader(System.in));

    public static void main(String args[]) throws IOException
    {
        AscendinglyOrderedStringList list = new AscendinglyOrderedStringList();

        String askPrompt =  "   1. Insert specified item into list.\n   2. Remove item in specified position in the list.\n   3. Search for a specified item in the list.\n   4. Clear list.\n   5. Display content of list. \n   6. Exit program. \nMake your menu selection now: ";
        System.out.print(askPrompt);
        int answer = Integer.parseInt(stdin.readLine().trim());
        System.out.println(answer);
        while(answer != 6) {
            switch (answer) {
            case 1: //insert item to list, user ONLY specifies item that will be inserted
                System.out.println("You are now inserting an item into the list.");
                System.out.print("   Enter item: ");
                String item  = stdin.readLine().trim();
                System.out.println(item);
                list.add(item);
                System.out.println("Item " + item +  " inserted in the list.");
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 2: //remove item from list
                System.out.print("    Enter position to remove item from: ");
                int delete = Integer.parseInt(stdin.readLine().trim());
                System.out.println(delete);
                if(delete < 0 | delete >= list.size()) {
                    System.out.println("Position specified is out of range!");
                }
                else {
                    System.out.println("Item " + list.get(delete) + " removed from position " + delete + " in the list.");
                    list.remove(delete);
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 4: //clear list
                list.clear();
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 5: //print size and content of the list
                if(list.isEmpty()) {
                    System.out.println("List is empty.");
                }
                else {
                    System.out.println(list.toString());
                }
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            case 3: //search for a specified item in the list, returns index of where the match is & whether it was successful or not
                System.out.print("Enter search item: ");
                String search = stdin.readLine().trim();
                System.out.println(search);
                int index = list.search(search);
                System.out.println("Item would be placed in " + index);
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            default:
                System.out.println("Oh no! You put an incorrect number. Try again!");
                System.out.print(askPrompt);
                answer = Integer.parseInt(stdin.readLine().trim());
                System.out.println(answer);
                break;
            }
        }
        System.out.print("Exiting program... Good Bye!");
    }
}
::::::::::::::
p3.output
::::::::::::::
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: dave
Item dave inserted in the list.
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 5
dave 
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: brooke
This item was not in the list.
Item brooke inserted in the list.
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 5
brooke dave 
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: john
This item was not in the list.
Item john inserted in the list.
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 5
brooke dave john 
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: abbey
This item was not in the list.
Item abbey inserted in the list.
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 5
abbey brooke dave john 
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: cark
This item was not in the list.
Item cark inserted in the list.
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 5
abbey brooke cark dave john 
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 3
Enter search item: cark
This item is in the list!
Item would be placed in 2
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 3
Enter search item: carl
This item was not in the list.
Item would be placed in 3
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: carl
This item was not in the list.
Item carl inserted in the list.
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 3
Enter search item: brooke
This item is in the list!
Item would be placed in 1
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 1
You are now inserting an item into the list.
   Enter item: zach
This item was not in the list.
Item zach inserted in the list.
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 5
abbey brooke cark carl dave john zach 
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 3
Enter search item: zach
This item is in the list!
Item would be placed in 6
   1. Insert specified item into list.
   2. Remove item in specified position in the list.
   3. Search for a specified item in the list.
   4. Clear list.
   5. Display content of list. 
   6. Exit program. 
Make your menu selection now: 6
Exiting program... Good Bye!